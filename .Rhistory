setwd("R-programming/Week2/rprog_data_specdata/specdata/")
ls
ls()
d <- read.csv("001.csv")
lapply(d,sum)
lappy(d,mean)
lapply(d,mean)
lapply(d,mean, na.rm = FALSE)
x <- list(a = 1:5, b = norm(10))
x <- list(a = 1:5, b = rnorm(10))
lapply(x, mean)
x <- list(a = 1:5, b = rnorm(10,1))
lapply(x, mean)
x <- 1:4
lapply(x, runif)
runif(1)
runif(2)
t <- lapply(x, runif)
t$1
t[[1]]
t[[1]]
t[[4]]
t[1
t[1]
mean(x, na.rm = FALSE)
mean(d, na.rm = FALSE)
mean(d$Date, na.rm = FALSE)
mean(d$sulfate, na.rm = FALSE)
mean(d$sulfate, na.rm = TRUE)
mean(d, na.rm = TRUE)
mean(d$nitrate, na.rm = TRUE)
lapply(d, mean, na.rm = TRUE)
x <- list( a = matrix(1:4,2,2), b = matrix(1:6, 3, 2))
x
x$a[,1]
x$a[1,]
x$a[,1]
lapply(x, function(elt), elt[,1])
lapply(x, function(elt) elt[,1])
lapply(x, function(elt) {if elt == 2{print(elt)}})
lapply(x, function(elt) {if (elt == 2) {print(elt)}})
sapply(x, function(elt) elt[,1])
sapply(x, mean)
q<-sapply(x, mean)
typeof(t)
typeof(q)
x<-list(a = 1:4, b = rnorm(10), x = rnorm(20,1), d = rnorm(100, 5))
x
lapply(x, mean)
sapply(x, mean)
mean(x)
apply(x, x > 5, mean)
str(apply)
x <- matrix(rnorm(200), 20, 10)
apply(x, 2, mean)
x
apply(x, 2, mean)
apply(x, 1, mean)
apply(x, 3, mean)
dim(x)
dim(apply(x, 2, mean))
dim(apply(x, 1, mean))
dim(c(1:20))
c(1:20)
apply(x, 2, sum)
rowMeans(x)
colMeans(d, na.rm = TRUE)
d[1:3,]
d[,1:3]
head(d)
d[1:10,2:3]
colMeans(d[,2:3], na.rm = TRUE)
str(quantile)
help("quantile")
apply(x, 1, quantile, probs = c(0.25, 0.75))
apply(x, 2, quantile, probs = c(0.25, 0.75))
apply(x, 2, quantile, probs = c(0.1, 0.75))
apply(x, 2, quantile, probs = c(0.1, 0.9))
a <- array(rnorm(2*2*10), c(2,2,10))
a
apply(x,c(1,2), mean)
apply(a,c(1,2), mean)
apply(a,c(1,3), mean)
dim(a)
rowMeans(a, dims = 2)
help("mapply")
x <- list(1:4, rnorm(20))
x
y <- list(20:30, rnorm(20))
mapply(c, 1:4)
mapply(c, 1:4, 4:1)
noise <- function(n, mean, sd) { rnorm(n, mean, sd)}
noise(5,1,2)
noise(5,1,2)
mapply(noise, 1:5, 1:5, 2)
mapply(noise, 1:5, 1:5, 1:2)
mapply(noise, 1:5, 1:2, 1)
mapply(noise, 1:5, 1:2, 2)
mapply(noise, 1:5, 1:5, 2)
t <- rnorm(2000)
sd(t)
gl(3,10)
t <- c(rnorm(2000), runif(2000))
f <- gl(2,2000)
f
tapply(t, f, mean)
tapply(t, f, mean)
gl(2,10)
tapply(t, f, range)
split(t,f,drop = FALSE)
split(t,f,drop = FALSE, mean)
x <- c(rnorm(10), runif(10), rnorm(10,1))
f <- gl(3,10)
split(x,f)
x
f
tapply(x,f, mean)
w <- split(x,f)
w$1
w$`1`
mean(w$`1`)
lapply(split(x,f), mean)
library(datasets)
head(airquality)
dim(airquality)
s <- split(airquality, airquality$Month)
lapply(s, function(x){colMeans(x)})
lapply(s, function(x){colMeans(x(, c("Ozone", "Solar.R", "Wind")))})
lapply(s, function(x){colMeans(x[, c("Ozone", "Solar.R", "Wind")])})
s
lapply(s, function(x){colMeans(x[, c("Ozone", "Solar.R", "Wind")])})
s[,"Wind"]
s[, wind]
sapply(s, function(x){colMeans(x[, c("Ozone", "Solar.R", "Wind")])})
sapply(s, function(x){colMeans(x[, c("Ozone", "Solar.R", "Wind")], na.rm = TRUE)})
help("datasets")
library(help = "datasets")
x <- rnorm(10)
f1 <- gl(2,5)
f2 <- gl(5,2)
f1
f2
interaction(f1, f2)
str(split(x, list(f1, f2)))
split(x, list(f1, f2)))
split(x, list(f1, f2))
str(split(x, list(f1, f2)))
help str
help(str)
x
list(f1,f2)
split(x,f1)
split(x,f2)
str(split(x, list(f1,f2)))
interaction(f1,f2)
interaction(f2,f1)
str(split(x, list(f2,f1)))
source(cachevector)
source("cachevector")
source("cachevector.R")
source(cachevector.R)
source('E:/Private/Coursera_DataScience/R-programming/week3/assignment/ProgrammingAssignment2/cachevector.R')
source('E:/Private/Coursera_DataScience/R-programming/week3/assignment/ProgrammingAssignment2/cachevector.R')
setwd('E:/Private/Coursera_DataScience/R-programming/week3/assignment/ProgrammingAssignment2/')
source('cachevector.R')
x <- 1:10000
t <- makeVector(x)
t
w <- cachemean(x)
w <- cachemean(t)
w
t
t$getmean()
t$getmean
